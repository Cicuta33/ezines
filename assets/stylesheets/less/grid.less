//////////////////////////////////////////////////////////////////////////////////////////////
//	grid
//	==========================================================================================
//	Grid is based upon ‘The Semantic Grid System’ and is a modern approach to the CSS grid.
//	It allows to set column and gutter widths, choose the number of columns, and switch between pixels and percentages,
//	and achieve responsive layouts, all without any ugly .grid_x classes in the markup.
//	==========================================================================================
//////////////////////////////////////////////////////////////////////////////////////////////


//	==========================================================================================
//	Defaults (freely overwrite)
//	==========================================================================================

	@columns: 12;
	@column-width: 60;
	@gutter-width: 20;


//	==========================================================================================
//	Utility variable (never modify this)
//	==========================================================================================

	@_gridsystem-width: (@column-width*@columns) + (@gutter-width*@columns) * 1px;


//	==========================================================================================
//	Set @total-width to 100% for a fluid layout
//	==========================================================================================

	@total-width: @_gridsystem-width;


//	==========================================================================================
//	The grid
//	==========================================================================================

	// @columns:	container number of columns
// .row(@columns:@columns) {
// 	display: inline-block;
// 	margin: 0 @total-width*(((@gutter-width*.5)/@_gridsystem-width)*-1);
// 	overflow: hidden;
// 	width: @total-width*((@gutter-width + @_gridsystem-width)/@_gridsystem-width);
// }

	// @gutter-left:	column left margin multiplier (0 for no left margins)
	// @gutter-right:	column right margin multiplier (0 for no right margins)
	// @columns:		container number of columns
.row(@gutter-left: 1, @gutter-right: 1, @columns:@columns) {
	display: inline-block;
	overflow: hidden;
    margin-left: @total-width*(((@gutter-width*.5)/@_gridsystem-width)*-1)*@gutter-left;
    margin-right: @total-width*(((@gutter-width*.5)/@_gridsystem-width)*-1)*@gutter-right;
    width: @total-width*(((@gutter-width*@gutter)+@_gridsystem-width)/@_gridsystem-width);
	// .clearfix();
}

	// @x:			number of columns
	// @columns:	container number of columns
// .column(@x,@columns:@columns) {
// 	display: inline;
// 	float: left;
// 	margin: 0 @total-width*((@gutter-width*.5)/@_gridsystem-width);
// 	overflow: hidden;
// 	width: @total-width*((((@gutter-width+@column-width)*@x)-@gutter-width) / @_gridsystem-width);
// }

	// @x:				number of columns
	// @gutter-left:	column left margin multiplier (0 for no left margins)
	// @gutter-right:	column right margin multiplier (0 for no right margins)
	// @columns:		container number of columns
.column(@x, @gutter-left: 1, @gutter-right: 1, @columns:@columns) {
    display: inline;
    float: left;
	overflow: hidden;
    margin-left: @total-width*((@gutter-width*.5)/@_gridsystem-width)*@gutter-left;
    margin-right: @total-width*((@gutter-width*.5)/@_gridsystem-width)*@gutter-right;
    width: @total-width*((((@gutter-width+@column-width)*@x)-(((@gutter-width*.5)*@gutter-left)+((@gutter-width*.5)*@gutter-right)))/@_gridsystem-width);
	// .clearfix();
}